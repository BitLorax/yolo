
'''
Architecture format is as follows:
(size, filters, stride, padding)
'M' for max pool
[(...)..., repeats]
'''

conv_architectures = {
    'full': [
        (7, 64, 2, 3),
        'M',
        (3, 192, 1, 1),
        'M',
        (1, 128, 1, 0),
        (3, 256, 1, 1),
        (1, 256, 1, 0),
        (3, 512, 1, 1),
        'M',
        [(1, 256, 1, 0), (3, 512, 1, 1), 4],
        (1, 512, 1, 0),
        (3, 1024, 1, 1),
        'M',
        [(1, 512, 1, 0), (3, 1024, 1, 1), 2],
        (3, 1024, 1, 1),
        (3, 1024, 2, 1),
        (3, 1024, 1, 1),
        (3, 1024, 1, 1)
    ],
    'mini': [
        (7, 64, 2, 3),
        'M',
        (3, 192, 1, 1),
        'M',
        (3, 256, 1, 1),
        (3, 512, 1, 1),
        'M',
        (3, 512, 1, 1),
        'M',
        (3, 512, 1, 1),
        (3, 512, 2, 1),
        (3, 512, 1, 1),
        (3, 1024, 1, 1)
    ],
    'semi_mini': [
        (7, 64, 2, 3),
        'M',
        (3, 192, 1, 1),
        'M',
        (3, 256, 1, 1),
        (3, 512, 1, 1),
        'M',
        (3, 512, 1, 1),
        'M',
        (3, 512, 1, 1),
        (3, 512, 2, 1),
        (3, 512, 1, 1),
        (3, 1024, 1, 1)
    ],
    'mini_dense': [
        (7, 64, 2, 3),
        'M',
        (3, 192, 1, 1),
        'M',
        (1, 128, 1, 0),
        (3, 256, 1, 1),
        (1, 256, 1, 0),
        (3, 512, 1, 1),
        'M',
        [(1, 256, 1, 0), (3, 512, 1, 1), 4],
        (1, 512, 1, 0),
        (3, 1024, 1, 1),
        'M',
        [(1, 512, 1, 0), (3, 1024, 1, 1), 2],
        (3, 1024, 1, 1),
        (3, 1024, 2, 1),
        (3, 1024, 1, 1),
        (3, 1024, 1, 1)
    ]
}

dense_sizes = {
    'full': 4096,
    'mini': 512,
    'semi_mini': 1024,
    'mini_dense': 512,
}
